      clearInterval(window._pm_watchInterval);
      window._pm_watchInterval = null;
    }
  }

// ربط أزرار المودال
window.addEventListener('DOMContentLoaded', () => {
  const pm = document.getElementById('purchase-modal');
  if (!pm) return;
  pm.addEventListener('click', (e)=>{ if(e.target === pm) closePurchaseModal(); });
  const cancelBtn = document.getElementById('pm-cancel');
  const buyBtn = document.getElementById('pm-buy');
  cancelBtn && cancelBtn.addEventListener('click', closePurchaseModal);
  buyBtn && buyBtn.addEventListener('click', async () => {
    // انقل الايدي
    const mpid = document.getElementById('modal-player-id');
    const pid = document.getElementById('player-id');
    if (pid && mpid) pid.value = mpid.value.trim();
    if (!_pm_currentCard){ showToast('الرجاء اختيار عرض', 'warning'); return; }
    // أرسل الطلب
    try { if (typeof sendOrder === 'function') await sendOrder(); }
    finally { closePurchaseModal(); }
  });
});



  // ===== Toast =====
  function showToast(message, type = "info", duration = 4000) {
    const toast = document.getElementById("toast");
    const toastMessage = document.getElementById("toast-message");
    if (!toast || !toastMessage) return;
    let icon = type === 'success' ? '✅' : type === 'error' ? '❌' : type === 'warning' ? '⚠️' : 'ℹ️';
    toastMessage.innerHTML = `<span style="margin-right:8px;">${icon}</span>${message}`;
  toast.style.background = type === 'success' ? 'linear-gradient(135deg, #28a745, #218838)'
              : type === 'error'   ? 'linear-gradient(135deg, #dc3545, #b52a38)'
              : type === 'warning' ? 'linear-gradient(135deg, #ffc107, #e0a800)'
                         : 'linear-gradient(135deg, #17a2b8, #117a8b)';
  toast.style.color = '#fff'; toast.style.padding = '14px 20px'; toast.style.borderRadius = '10px';
  toast.style.fontSize = '16px'; toast.style.fontWeight = 'bold'; toast.style.boxShadow = '0 4px 15px rgba(0,0,0,0.3)';
  toast.style.display = 'flex'; toast.style.alignItems = 'center'; toast.style.gap = '10px';
  toast.style.justifyContent = 'center'; toast.style.textAlign = 'center';
  toast.style.transform = 'translateY(100px)'; toast.style.opacity = '0'; toast.style.visibility = 'visible'; toast.style.transition = 'all 0.5s ease';
    setTimeout(() => { toast.style.transform = 'translateY(0)'; toast.style.opacity = '1'; }, 50);
    setTimeout(() => { toast.style.transform = 'translateY(100px)'; toast.style.opacity = '0'; setTimeout(() => { toast.style.visibility = 'hidden'; }, 500); }, duration);
  }

  // زر لصق الايدي
  async function pastePlayerId(){
    try{
      const input = document.getElementById('player-id');
      if (!input) return;
      if (!navigator.clipboard || !navigator.clipboard.readText){
        showToast('المتصفح لا يسمح بالوصول للحافظة تلقائياً', 'warning');
        input.focus();
        return;
      }
      const text = await navigator.clipboard.readText();
      let val = (text || '').trim();
      const im = (input.getAttribute('inputmode')||'').toLowerCase();
      if (im.includes('numeric') || im.includes('tel')){
        val = val.replace(/\D+/g, '');
      }
      if (!val){
        showToast('لا يوجد نص في الحافظة', 'warning');
        return;
      }
      input.value = val;
      try{ input.dispatchEvent(new Event('input', {bubbles:true})); }catch(_){}
      input.focus();
      showToast('تم لصق الايدي', 'success');
    }catch(e){
      showToast('تعذر قراءة الحافظة. الصق يدوياً', 'warning');
    }
  }

  document.addEventListener('DOMContentLoaded', function(){
    const btn = document.getElementById('pm-paste');
    if (btn) btn.addEventListener('click', pastePlayerId);
  });

  // ===== تهيئة بطاقات التفعيل/التعطيل من Firestore =====
  firebase.auth().onAuthStateChanged(async (user) => {
    if (user) {
      const userDocRef = firebase.firestore().collection("users").doc(user.uid);
      const snap = await userDocRef.get();
      if (snap.exists) {
        const userData = snap.data();
        const nameInput = document.getElementById("userName");
        if (nameInput) {
          nameInput.value = userData.username || "";
          nameInput.readOnly = true;
          nameInput.style.backgroundColor = "#e9ecef";
          nameInput.style.cursor = "not-allowed";
        }
      }
    } else {
      location.href = "login.html";
    }
  });

  document.addEventListener("DOMContentLoaded", async () => {
    try {
      // جلب من topup > weplay والحقل state نص JSON
      const stateDoc = await firebase.firestore().collection("topup").doc("weplay").get();
      if (stateDoc.exists) {
        let stateData = stateDoc.data();
        if (stateData && typeof stateData.state === 'string') {
          try { stateData = JSON.parse(stateData.state); } catch(e) { stateData = {}; }
        }
        // احفظ آخر حالة للعروض
        _lastOffersState = stateData;
        Object.entries(stateData.topup || {}).forEach(([gold, status]) => {
          const card = document.querySelector(`.offer-box[data-type=\"topup\"][data-gold=\"${gold}\"]`);
          if (card) {
            card.classList.toggle('disabled', status === 'off');
            card.style.opacity = status === 'off' ? '0.4' : '1';
            // أضف عبارة غير متوفر إذا كان مغلقاً
            let badge = card.querySelector('.unavailable-badge');
            if (status === 'off') {
              if (!badge) {
                badge = document.createElement('div');
                badge.className = 'unavailable-badge';
                badge.textContent = 'غير متوفر';
                card.appendChild(badge);
              }
            } else if (badge) {
              badge.remove();
            }
            // إذا كانت البطاقة المختارة أُغلقت أثناء فتح المودال، أغلق المودال
            if (window._pm_currentCard && window._pm_currentCard === card && status === 'off') {
              closePurchaseModal();
            }
          }
        });
        Object.entries(stateData.membership || {}).forEach(([offerName, status]) => {
          const card = document.querySelector(`.offer-box[data-type=\"membership\"][data-offer=\"${offerName}\"]`);
          if (card) {
            card.classList.toggle('disabled', status === 'off');
            card.style.opacity = status === 'off' ? '0.4' : '1';
            let badge = card.querySelector('.unavailable-badge');
            if (status === 'off') {
              if (!badge) {
                badge = document.createElement('div');
                badge.className = 'unavailable-badge';
                badge.textContent = 'غير متوفر';
                card.appendChild(badge);
              }
            } else if (badge) {
              badge.remove();
            }
            if (window._pm_currentCard && window._pm_currentCard === card && status === 'off') {
              closePurchaseModal();
            }
          }
        });
      } else {
        console.warn("⚠️ لم يتم العثور على وثيقة الحالة في Firestore (topup/weplay)");
      }
    } catch (e) { console.error("❌ فشل في جلب حالة العروض:", e); }
  });


  
  </script>
 <script>
// Gate: require login, and page state must be open in Firestore 'states'
(function(){
  function getPageId(){ try{ return (location.pathname.split('/').pop()||'').replace('.html',''); }catch(_){ return '' } }
  firebase.auth().onAuthStateChanged(async function(user){
    if(!user){ try{ location.href = 'login.html'; }catch(_){} return; }
    try{
      var pageId = getPageId();
      if(!pageId) return; // if unknown, allow
      var doc = await firebase.firestore().collection('states').doc(pageId).get();
      var st = doc && doc.exists ? (doc.data() && (doc.data().state || doc.data().status || 'on')) : 'on';
      if(String(st).toLowerCase() !== 'on'){
        // redirect back to games list if this card is closed
        try{ location.href = 'games.html'; }catch(_){}
      }
    }catch(e){ /* if check fails, allow to avoid blocking */ }
  });
})();
</script>
  
</body>
</html>





